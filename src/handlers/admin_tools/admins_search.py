from aiogram import F, Router, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError
import random
from typing import Optional, Tuple, Any

from ...core.media_album_builder import profile_display_admins
from ...core.date_now import get_date_now
from ...core.loggers import admins_logger
from config.config import settings
from ...core.dictionary import *
from ...filters.check_ban import check_ban
from ...filters.check_admin import check_admin
from ...filters.check_owner import check_owner
from ...filters.validate_admins import *
from database.profile_db import ProfileUser
from database.bans_db import BansUser
from .states_menu_admins import AdminsSearchState, AdminsState
from .admins_menu_kb import *
from ...handlers.menu.menu_kb import menu_kb


router_admins_search = Router()


async def get_id_list_and_album(list_id_profiles: Optional[list]=None) -> Tuple[int, list, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–π–¥–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏, –æ–±—ä–µ–∫—Ç –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.

    :param list_id_profiles: –õ–∏—Å—Ç —Å –∞–π–¥–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π.
    """

    if list_id_profiles is None or len(list_id_profiles) == 0:
        list_id_profiles: Optional[list] = await ProfileUser.get_all_id()
        random.shuffle(list_id_profiles)

    id_viewing_profiles: int = list_id_profiles[0]
        
    viewing_profile = await ProfileUser.get_user_profile(telegram_id=id_viewing_profiles)
    album_builder = await profile_display_admins(user_data=viewing_profile, status_ban=await check_ban(telegram_id=id_viewing_profiles))
    return (id_viewing_profiles, list_id_profiles, album_builder)


@router_admins_search.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—ÇüëÆ‚Äç‚ôÄÔ∏è', AdminsState.menu_admins_state)
async def start_admins_search(message: Message, bot: Bot, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–≤–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∞–Ω–∫–µ—Ç—É."""

    data: dict = await state.get_data()
    if 'adm_list_id_profiles' in data:
        adm_id_viewing_profile, adm_list_id_profiles, adm_album_builder = await get_id_list_and_album(data['adm_list_id_profiles'])
    else:
        adm_id_viewing_profile, adm_list_id_profiles, adm_album_builder = await get_id_list_and_album()
    await state.update_data(adm_id_viewing_profile=adm_id_viewing_profile, adm_list_id_profiles=adm_list_id_profiles)
    await bot.send_message(message.from_user.id, text=search_admins_message, reply_markup=await search_admins_kb(telegram_id=adm_id_viewing_profile))
    await bot.send_media_group(message.from_user.id, media=adm_album_builder.build())
    await state.set_state(AdminsSearchState.continue_search)

    admins_logger.info(f"{await get_date_now()} - id_admin={message.from_user.id} moderates profiles")


@router_admins_search.message(F.text == 'üëà–ù–∞–∑–∞–¥', AdminsSearchState.inp_text_send_message)
@router_admins_search.message(F.text == 'üëà–ù–∞–∑–∞–¥', AdminsSearchState.inp_reason_ban)
@router_admins_search.message(AdminsSearchState.continue_search)
async def continue_admins_search(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.
    
    –ö–Ω–æ–ø–∫–∏:
    üëà–ù–∞–∑–∞–¥ - –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
    –û—Ç–ø—Ä–∞–≤–∏—Ç—åüí¨ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ó–∞–±–∞–Ω–∏—Ç—åüî® - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
    –†–∞–∑–±–∞–Ω–∏—Ç—å‚≠ê - —Å–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüïµÔ∏è‚Äç‚ôÇÔ∏è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    """

    match message.text:
        case 'üëà–ù–∞–∑–∞–¥':
            data: dict = await state.get_data()
            viewing_profile: int = await ProfileUser.get_user_profile(telegram_id=data['adm_id_viewing_profile'])
            album_builder = await profile_display_admins(user_data=viewing_profile, status_ban=await check_ban(telegram_id=data['adm_id_viewing_profile']))

            await bot.send_message(message.from_user.id, text=search_admins_message, reply_markup=await search_admins_kb(telegram_id=data['adm_id_viewing_profile']))
            await bot.send_media_group(message.from_user.id, media=album_builder.build())
            await state.set_state(AdminsSearchState.continue_search)
        case '–û—Ç–ø—Ä–∞–≤–∏—Ç—åüí¨':
            await bot.send_message(message.from_user.id, text=input_text_message, reply_markup=await return_menu_search_kb())
            await state.set_state(AdminsSearchState.inp_text_send_message)

        case '–ó–∞–±–∞–Ω–∏—Ç—åüî®':
            data: dict = await state.get_data()
            if await check_ban(data['adm_id_viewing_profile']):
                await bot.send_message(message.from_user.id, text=validate_get_ban_message)
            elif await check_admin(data['adm_id_viewing_profile']) or await check_owner(data['adm_id_viewing_profile']):
                await bot.send_message(message.from_user.id, text=validate_ban_admin_message)
            else:
                await bot.send_message(message.from_user.id, text=input_reason_message, reply_markup=await return_menu_search_kb())
                await state.set_state(AdminsSearchState.inp_reason_ban)

        case '–†–∞–∑–±–∞–Ω–∏—Ç—å‚≠ê':
            data: dict = await state.get_data()
            if await BansUser.delete_ban_user(telegram_id=data['adm_id_viewing_profile']):
                try:
                    await bot.send_message(data['adm_id_viewing_profile'], text=unban_message, reply_markup=await menu_kb(data['adm_id_viewing_profile']))
                    await ProfileUser.update_user_active(telegram_id=data['adm_id_viewing_profile'], state_active=True)
                except TelegramForbiddenError: pass

                await bot.send_message(message.from_user.id, text=delete_ban_message, reply_markup=await search_admins_kb(telegram_id=data['adm_id_viewing_profile']))
                admins_logger.info(f"{await get_date_now()} - id_admin={message.from_user.id} unbanned id_user={data['adm_id_viewing_profile']}")
            else:
                await bot.send_message(message.from_user.id, text=validate_delete_ban_message)

        case '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüïµÔ∏è‚Äç‚ôÇÔ∏è':
            data: dict = await state.get_data()
            data['adm_list_id_profiles'].pop(0)
            id_viewing_profile, list_id_profiles, album_builder = await get_id_list_and_album(list_id_profiles=data['adm_list_id_profiles'])
            await state.update_data(adm_id_viewing_profile=id_viewing_profile, adm_list_id_profiles=list_id_profiles)
            # await bot.send_message(message.from_user.id, text=search_admins_message, reply_markup=await search_admins_kb(telegram_id=id_viewing_profile))
            await bot.send_media_group(message.from_user.id, media=album_builder.build())


@router_admins_search.message(AdminsSearchState.inp_text_send_message)
async def send_message(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""

    if await validate_input_text(text=str(message.text)):
        data: dict = await state.get_data()
        try:
            await bot.send_message(data['adm_id_viewing_profile'], text=f'admin: {message.text}')
            await bot.send_message(message.from_user.id, text=message_successful_delivered_message, reply_markup=await search_admins_kb(telegram_id=data['adm_id_viewing_profile']))
        except TelegramForbiddenError:
            profile_db = ProfileUser()
            await profile_db.update_user_active(telegram_id=data['adm_id_viewing_profile'], state_active=False)
            await bot.send_message(message.from_user.id, text=validate_send_message, reply_markup=await search_admins_kb(telegram_id=data['adm_id_viewing_profile']))

        await state.set_state(AdminsSearchState.continue_search)
        admins_logger.info(f"{await get_date_now()} - id_admin={message.from_user.id} sent for id_user={data['adm_id_viewing_profile']} message: {message.text}")
    else:
        await bot.send_message(message.from_user.id, text=validate_input_text_message)


@router_admins_search.message(AdminsSearchState.inp_reason_ban)
async def get_ban(message: Message, bot: Bot, state: FSMContext) -> None:
    """–ó–∞–ø–∏—Å—å –±–∞–Ω–∞ –≤ –±–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –µ–≥–æ –±–∞–Ω–µ."""

    if await validate_input_reason(str(message.text)):
        data: dict = await state.get_data()
        await BansUser.add_ban_user(telegram_id=data['adm_id_viewing_profile'], admin_id=message.from_user.id, reason=message.text)
        await ProfileUser.update_user_active(telegram_id=data['adm_id_viewing_profile'], state_active=False)
        try:
            ban_message_: str = f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µüîí: {message.text}\n\n'\
                        f'–û—Å–ø–æ—Ä–∏—Ç—å –±–∞–Ω: <a href="{settings.LINK_GROUP_HELP}">–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏üß∞</a>'
            await bot.send_message(data['adm_id_viewing_profile'], text=ban_message_, reply_markup=ReplyKeyboardRemove())
        except TelegramForbiddenError: pass
        
        await bot.send_message(message.from_user.id, text=get_ban_message, reply_markup=await search_admins_kb(telegram_id=data['adm_id_viewing_profile']))
        await state.set_state(AdminsSearchState.continue_search)
       
        admins_logger.info(f"{await get_date_now()} - id_admin={message.from_user.id} banned id_user={data['adm_id_viewing_profile']} for reason: {message.text}")
    else:
        await bot.send_message(message.from_user.id, text=validate_input_reason_message)
    