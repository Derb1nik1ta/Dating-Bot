from aiogram import Dispatcher, Bot
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
import logging
import asyncio

from src.handlers.start.start import router_start
from src.handlers.edit_profile.edit_profile import router_edit
from src.handlers.menu.menu import router_menu
from src.handlers.help.help import router_help
from src.handlers.search.search import router_search
from src.handlers.search.view_likes import router_view_likes
from src.handlers.admin_tools.admins_menu import router_admins
from src.handlers.admin_tools.owners_menu import router_owner
from src.handlers.admin_tools.admins_search import router_admins_search

from database.Database import DataBase
from config.config import settings


async def set_commands() -> None:
    """–£—Å—Ç–∞–Ω–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞."""

    commands: list = [BotCommand(command='menu', description='–ú–µ–Ω—éüóíÔ∏è'),
                BotCommand(command='search', description='–ü–æ–∏—Å–∫‚ù§Ô∏è'),
                BotCommand(command='help', description='–ü–æ–º–æ—â—åüÜò'),]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def start_bot() -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

    await set_commands()
    await bot.send_message(settings.ID_OWNER, 'ü§ñ–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!')


async def stop_bot():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—ã—Ç –±–æ—Ç–∞."""

    await bot.send_message(settings.ID_OWNER, 'ü§ñ–ë–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è!')


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # with Redis
    # storage = RedisStorage.from_url(url=settings.get_url_redis())

    # without Redis
    storage = None

    # create db
    await DataBase.create_db()
    # logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    dp = Dispatcher(storage=storage)
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_routers(router_start, router_menu, router_help, router_search, router_view_likes, 
                       router_edit, router_admins, router_admins_search, router_owner, )
    try:
        # –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == '__main__':
    bot = Bot(token=settings.get_bot_token(), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    asyncio.run(main())
